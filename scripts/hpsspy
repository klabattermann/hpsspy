#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
#
"""Verify the presence of files on HPSS.
"""
from __future__ import print_function
#
def main():
    """Main program.
    """
    import os
    import json
    import logging
    from argparse import ArgumentParser
    from sys import argv
    from os.path import basename, dirname, exists, islink, join
    from hpsspy.os import listdir, lstat, stat, walk
    from hpsspy.scan import compile_map, files_to_hpss, scan_hpss
    #
    # Options
    #
    parser = ArgumentParser(description=__doc__,prog=basename(argv[0]))
    parser.add_argument('-r', '--report', action='store', type=int, metavar='N',
        dest='report', default=10000,
        help="Print an informational message after every N files.")
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose',
        help="Increase verbosity.")
    parser.add_argument('release',metavar='RELEASE',
        help="Scan files associated with data release RELEASE.")
    options = parser.parse_args()
    ll = logging.INFO
    if options.verbose:
        ll = logging.DEBUG
    logging.basicConfig(level=ll, format='%(asctime)s %(name)s %(levelname)s: %(message)s', datefmt='%Y-%m-%dT%H:%M:%S')
    logger = logging.getLogger(__name__)
    if os.getenv('SAS_ROOT') is None:
        logger.error("SAS_ROOT is not set!  Do 'module load tree/{0}'.".format(options.release))
        return 1
    if basename(os.getenv('SAS_ROOT')) != options.release:
        logger.error("SAS_ROOT is inconsistent with {0}! Do 'module switch tree/{0}'.".format(options.release))
        return 1
    #
    # Read HPSS files and cache.
    #
    hpss_files_cache = join(os.getenv('HOME'),'scratch','hpss_files_{0}.txt'.format(options.release))
    hpss_files = scan_hpss(os.getenv('HPSS_ROOT'),hpss_files_cache)
    #
    # Read disk files and cache.
    #
    disk_files_cache = join(os.getenv('HOME'),'scratch','disk_files_{0}.txt'.format(options.release))
    if not exists(disk_files_cache):
        logger.info("No HPSS cache file, starting scan.")
        disk_roots = [os.getenv('SAS_ROOT').replace('raid006',d) for d in ('raid006','raid000','raid005','raid007','raid008','raid2008','netapp')]
        disk_files = list()
        for disk_root in disk_roots:
            for root, dirs, files in os.walk(disk_root):
                logger.debug("Scanning disk directory {0}.".format(root))
                disk_files += [join(root,f).replace(disk_root+'/','') for f in files if not islink(join(root,f))]
        with open(disk_files_cache,'w') as t:
            t.write('\n'.join(disk_files)+'\n')
    #
    # See if the files are on HPSS.
    #
    hpss_map_cache = join(os.getenv('HPSSPY_DIR'),'data','hpss_map.json')
    hpss_map = files_to_hpss(hpss_map_cache)
    nfiles = 0
    with open(disk_files_cache) as t:
        for l in t:
            f = l.strip()
            message = "{0} NOT FOUND!".format(f)
            if f in hpss_map["exclude"]:
                message = "{0} skipped.".format(f)
            else:
                section = f.split('/')[0]
                for r in hpss_map[section]:
                    if r[0].match(f) is not None:
                        reName = r[0].sub(r[1],f)
                        if reName in hpss_files:
                            message = "{0} in {1}.".format(f,reName)
                        break
            if 'NOT' in message:
                logger.warning(message)
            else:
                logger.debug(message)
            nfiles += 1
            if (nfiles % options.report) == 0:
                logger.info("{0:9d} files scanned.".format(nfiles))
    return 0
#
#
#
if __name__ == '__main__':
    from sys import exit
    exit(main())
